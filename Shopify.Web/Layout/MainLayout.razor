@inherits LayoutComponentBase

@using Microsoft.AspNetCore.Components.Authorization
@using Shopify.Web.Services
@using Blazored.LocalStorage
@using System.IdentityModel.Tokens.Jwt

@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
@inject IAccessTokenProvider AccessTokenProvider
@inject ILocalStorageService LocalStorage
@inject AuthenticationStateService AuthStateService

<MudThemeProvider />
<MudPopoverProvider />
<MudDialogProvider />
<MudSnackbarProvider />

<div class="page">
	<div class="sidebar">
		<NavMenu />
	</div>

	<main>
		<div class="top-row px-4">
			<CartMenu />
			@if (isUserAuthenticated)
			{
				<div class="user-info">
					<span>Logged as: @userName</span>
					<MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="Logout">Logout</MudButton>
				</div>
			}
			else
			{
				<div>
					<MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="Login">Login</MudButton>
				</div>
			}
		</div>

		<article class="content px-4">
			@Body
		</article>
	</main>
</div>

@code {
    private bool isUserAuthenticated = false;
    private string userName = string.Empty;
    private string firstName = string.Empty;
    private string lastName = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        // Subscribe to authentication state changes
        AuthStateService.OnAuthStateChanged += AuthStateChanged;

        await LoadUserFromToken();
    }

    private async Task LoadUserFromToken()
    {
        var token = await LocalStorage.GetItemAsync<string>("access_token");
        isUserAuthenticated = false;
        userName = "";

        if (!string.IsNullOrEmpty(token))
        {
            try
            {
                var handler = new JwtSecurityTokenHandler();
                var jwtToken = handler.ReadJwtToken(token);

                firstName = jwtToken.Claims.FirstOrDefault(c => c.Type == "firstName")?.Value ?? "";
                lastName = jwtToken.Claims.FirstOrDefault(c => c.Type == "lastName")?.Value ?? "";
                userName = $"{firstName} {lastName}";

                isUserAuthenticated = true;
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error decoding token: {ex.Message}");
            }
        }

        StateHasChanged(); // Update UI
    }

    private void AuthStateChanged()
    {
        _ = LoadUserFromToken(); // Reload data when auth state changes
    }

    private void Login()
    {
        NavigationManager.NavigateTo("account/login");
    }

    private async Task Logout()
    {
        await AccessTokenProvider.LogoutAsync();
        AuthStateService.NotifyAuthenticationChanged(); // Notify layout to update
        NavigationManager.NavigateTo("/");
    }

    public void Dispose()
    {
        // Unsubscribe to prevent memory leaks
        AuthStateService.OnAuthStateChanged -= AuthStateChanged;
    }
}