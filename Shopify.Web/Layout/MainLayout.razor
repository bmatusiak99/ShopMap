@inherits LayoutComponentBase

@using Microsoft.AspNetCore.Components.Authorization
@using Shopify.Web.Services
@using Blazored.LocalStorage
@using System.IdentityModel.Tokens.Jwt

@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
@inject IAccessTokenProvider AccessTokenProvider
@inject ILocalStorageService LocalStorage

<MudThemeProvider />
<MudPopoverProvider />
<MudDialogProvider />
<MudSnackbarProvider />

<div class="page">
	<div class="sidebar">
		<NavMenu />
	</div>

	<main>
		<div class="top-row px-4">
			<CartMenu />
			@if (isUserAuthenticated)
			{
				<div class="user-info">
					<span>Logged as: @userName</span>
					<MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="Logout">Logout</MudButton>
				</div>
			}
			else
			{
				<div>
					<MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="Login">Login</MudButton>
				</div>
			}
		</div>

		<article class="content px-4">
			@Body
		</article>
	</main>
</div>

@code {
	private bool isUserAuthenticated = false;
	private string userName = string.Empty;
	private string firstName = string.Empty;
	private string lastName = string.Empty;

	private string tokenString = "k5b5XmV9aJ9z4bR0LqE4PnOaFvlC0wD6M8Xh2LeN8g2X5J4lQ7c3lzjq2F5HxTo";

	protected override async Task OnInitializedAsync()
	{
		// Check if there is a stored token in localStorage
		var token = await LocalStorage.GetItemAsync<string>("access_token");
		Console.WriteLine("Token from LocalStorage: " + token);
		if (!string.IsNullOrEmpty(token))
		{
			// Try to parse the token and check if it's a valid JWT
			try
			{
				var handler = new JwtSecurityTokenHandler();
				var jwtToken = handler.ReadJwtToken(token);

				//var jsonToken = handler.ReadToken(token) as JwtSecurityToken;

				// Extract the user's first and last name from the token
				if (jwtToken != null)
				{
					firstName = jwtToken.Claims.FirstOrDefault(c => c.Type == "firstName")?.Value;
					lastName = jwtToken.Claims.FirstOrDefault(c => c.Type == "lastName")?.Value;

					userName = $"{firstName} {lastName}";
				}

				isUserAuthenticated = true;


			}
			catch (Exception ex)
			{
				// Log the exception for debugging
				Console.WriteLine($"Error decoding token: {ex.Message}");
			}
		}

		StateHasChanged();
	}

	private void Login()
	{
		// Navigate to the login page or perform other login actions
		NavigationManager.NavigateTo("account/login");
	}

	private async Task Logout()
	{
		// Call the logout logic and remove the token
		await AccessTokenProvider.LogoutAsync(); // You can implement your custom logout logic in the provider
		NavigationManager.NavigateTo("/"); // Redirect to the home page after logout
		StateHasChanged();
	}
}